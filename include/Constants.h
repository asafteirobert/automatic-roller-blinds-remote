#ifndef _CONSTANTS_h
#define _CONSTANTS_h
#include "arduino.h"

// ======= Pin defination =======
const uint8_t PIN_BATTERY_MEASURE = A2;
const uint8_t PIN_BATTERY_MEASURE_GROUND = 3;
const uint8_t PIN_RANDOM_SEED = A6; //unconnected pin to give us some random noise
const uint8_t PIN_NRF_CE = 9;
const uint8_t PIN_NRF_CS = 10;
const uint8_t PIN_BUTTONS_COMMON = 2;
const uint8_t PINS_BUTTONS[] = {4,5,6,7,8};
const uint8_t BUTTONS_COUNT = 5;
const uint8_t PIN_CHARGING = A0;
const uint8_t PIN_CHARGING_DONE = A1;

// ======= NRF =======
const static uint8_t NRF_PIPE[5] = {0x01, 0x01, 0x0e, 0xf1, 0xbf};//first byte is blind id, second byte is room id
const static uint8_t NRF_CHANNEL = 103;

// ======= Battery monitoring =======
const float REMOTE_BATTERY_SENSOR_REF_VOLTAGE = 1.089;
const float REMOTE_BATTERY_SENSOR_MULTIPLIER = 5.7;
const byte REMOTE_BATTERY_TYPE = 0; //0 Lipo, 1 Li-ion

//Typical cell voltage to percentage table for lipo and liion
const byte BATTERY_LEVEL_TABLE_COUNT = 23;
const static float BATTERY_LEVEL_VOLTAGE[BATTERY_LEVEL_TABLE_COUNT] PROGMEM =    { 3.1, 3.15, 3.2, 3.25, 3.3, 3.35, 3.4, 3.45, 3.5, 3.55, 3.6, 3.65, 3.7, 3.75, 3.8, 3.85, 3.9, 3.95, 4,  4.05, 4.1, 4.15, 4.2 };
const static byte BATTERY_LEVEL_PERCENT[2][BATTERY_LEVEL_TABLE_COUNT] PROGMEM = {{ 0,   0,    0,   0,    0,   0,    1,   2,    3,   4,    6,   9,    13,  23,   33,  48,   59,  69,   77, 84,   90,  96,   100 },
                                                                                 { 0,   0,    0,   0,    1,   2,    3,   4,    6,   8,    13,  21,   33,  49,   59,  68,   75,  83,   88, 95,   98,  99,   100 }};


// ======= Icons =======
const static uint8_t ICON_LOGO[] PROGMEM =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x80, 0x3c, 0x01,
  0xe0, 0x00, 0x07, 0x70, 0x18, 0x0e, 0x30, 0x18, 0x0c, 0x98, 0x99, 0x19,
  0x80, 0xff, 0x01, 0x04, 0xc3, 0x20, 0x0c, 0x99, 0x30, 0xec, 0xa5, 0x37,
  0xec, 0xa5, 0x37, 0x0c, 0x99, 0x30, 0x04, 0xc3, 0x20, 0x80, 0xff, 0x01,
  0x98, 0x99, 0x19, 0x30, 0x18, 0x0c, 0x70, 0x18, 0x0e, 0xe0, 0x00, 0x07,
  0x80, 0x3c, 0x01, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const static uint8_t ICON_SIGNAL_TRANSMITTING[] PROGMEM =
{
  0x18, 0x00, 0x0c, 0x00, 0xc6, 0x00, 0x66, 0x00, 0x23, 0x06, 0x33, 0x0f,
  0x33, 0x0f, 0x23, 0x06, 0x66, 0x00, 0xc6, 0x00, 0x0c, 0x00, 0x18, 0x00
};

const static uint8_t ICON_SIGNAL_CONNECTED[] PROGMEM =
{
  0x18, 0x00, 0x0c, 0x00, 0xc6, 0x00, 0x66, 0x00, 0x23, 0x06, 0x33, 0x09,
  0x33, 0x09, 0x23, 0x06, 0x66, 0x00, 0xc6, 0x00, 0x0c, 0x00, 0x18, 0x00
};

const static uint8_t ICON_SIGNAL_NOCONNECTION[] PROGMEM =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x09,
  0x00, 0x09, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const static uint8_t ICON_SIGNAL_TRANSMIT_OK[] PROGMEM = //12x12
{
   0x00, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x80, 0x0f, 0xc3, 0x07, 0xe7, 0x03,
   0xff, 0x01, 0xfe, 0x00, 0x7c, 0x00, 0x38, 0x00, 0x10, 0x00, 0x00, 0x00 };

const static uint8_t ICON_SIGNAL_TRANSMIT_FAIL[] PROGMEM = //12x12
{
   0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x9c, 0x03, 0xf8, 0x01, 0xf0, 0x00,
   0xf0, 0x00, 0xf8, 0x01, 0x9c, 0x03, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00 
}; 

const static uint8_t ICON_CHARGING[] PROGMEM = //12x12
{
   0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x60, 0x00, 0x30, 0x00, 0xf0, 0x01,
   0xf8, 0x00, 0xc0, 0x00, 0x60, 0x00, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00
};

const static uint8_t ICON_CHARGING_DONE[] PROGMEM = //8x12
{
   0x00, 0x00, 0x00, 0x40, 0xe0, 0x72, 0x3f, 0x1e, 0x0c, 0x00, 0x00, 0x00 
};

const static uint8_t ICON_SETTINGS[] PROGMEM = //8x8
{
   0x18, 0x7e, 0x7e, 0xe7, 0xe7, 0x7e, 0x7e, 0x18
}; 


const static uint8_t ICON_DISCOVER[] PROGMEM = //8x8
{
   0x0e, 0x18, 0x26, 0x58, 0xd6, 0xac, 0xab, 0x03
}; 


const static uint8_t ICON_CALIBRATE[] PROGMEM = //8x8
{
   0x08, 0x1c, 0x3e, 0x08, 0x08, 0x3e, 0x1c, 0x08
}; 

#endif